<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ProfessorMapper">

    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="professorMap"
        type="study.spring.springhelper.model.Professor">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="comm" column="comm"/>
        <result property="deptno" column="deptno"/>
        <result property="hiredate" column="hiredate"/>
        <result property="name" column="name"/>
        <result property="position" column="position"/>
        <result property="profno" column="profno"/>
        <result property="sal" column="sal"/>
        <result property="userid" column="userid"/>   
        <result property="deptno" column="deptno"/>
		<result property="dname" column="dname"/>
		<result property="loc" column="loc"/>	
		
    </resultMap>
    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="study.spring.springhelper.model.Professor"
        resultMap="professorMap">
        SELECT
			profno, name, userid, position,DATE_FORMAT(hiredate, '%Y-%m-%d') AS hiredate, comm, p.deptno, dname, loc, sal
		FROM professor as p
		INNER JOIN Department as d ON p.deptno = d.deptno  
		WHERE profno=#{profno};
    </select>
    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList"
        parameterType="study.spring.springhelper.model.Professor"
        resultMap="professorMap">
        SELECT comm, p.deptno,  DATE_FORMAT(hiredate, '%Y-%m-%d') AS hiredate, name, position, profno, sal, userid, dname, loc FROM Professor as p INNER JOIN Department as d
		ON p.deptno = d.deptno
        <where>
            <if test="name != null and name != ''">
                name LIKE concat('%', #{name}, '%')
            </if>

            <if test="position != null and position != ''">
                OR position LIKE concat('%', #{position}, '%')
            </if>
            
            <if test="userid != null and userid != ''">
                OR userid LIKE concat('%', #{userid}, '%')
            </if>
        </where>
        
        	ORDER BY profno DESC
       	
       	<if test="listCount > 0">
       		LIMIT #{offset}, #{listCount}
       	</if>
    </select>
    <!-- 데이터 저장을 위한 기능 정의  -->
    <insert id="insertItem" parameterType="study.spring.springhelper.model.Professor"
    	useGeneratedKeys="true"
    	keyProperty="profno">
    	INSERT INTO professor (comm, deptno, hiredate, name, position,  sal, userid ) 
    	VALUES (#{comm}, #{deptno}, #{hiredate}, #{name}, #{position},  #{sal}, #{userid});   	
    </insert>
    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem" parameterType="study.spring.springhelper.model.Professor">
    	DELETE FROM professor WHERE profno=#{profno};
    </delete>
    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem"
    	parameterType="study.spring.springhelper.model.Professor">
    		UPDATE professor SET 
    			comm=#{comm}, deptno=#{deptno}, hiredate=#{hiredate}, name=#{name}, 
    			position=#{position}, sal=#{sal}, userid=#{userid} 
    		WHERE profno=#{profno};
    </update>
   
    <!-- 
    	조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다.
    	count, max, mins, sum, avg 함수를 사용한 경우 Mapper에서는 
    	Rsultmap이 아닌 resutType으로 반환된다.	
     -->
     <select id="selectCountAll" parameterType="study.spring.springhelper.model.Professor"
     		resultType="int">
     		SELECT COUNT(*) FROM professor as p INNER JOIN department as d on p.deptno=d.deptno
     		
     		<where>
     			<if test="name != null and name != '' ">
     				name LIKE concat('%', #{name}, '%')
     			</if>
     			
     			<if test="deptno != null and deptno != ''">
     				OR  deptno LIKE concat('%', #{deptno}, '%')
     			</if>
     			
     		</where>
     </select>
   
</mapper>