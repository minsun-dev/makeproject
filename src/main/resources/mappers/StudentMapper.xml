<?xml version="1.0" encoding="UTF-8"?>
<!--
 - @filename    : StudentMapper.xml
 - @description : 수행할 SQL문을 정의 하는 Mapper 파일
 - @author      : 김민선 (akrend0433@gmail.com)
 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="StudentMapper">
    <!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
    <resultMap id="studentMap" type="study.spring.springhelper.model.Student">
        <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
        <result property="studno" column="studno" />
        <result property="name" column="name" />
        <result property="userid" column="userid" />
        <result property="grade" column="grade" />
        <result property="idnum" column="idnum" />
        <result property="birthdate" column="birthdate" />
        <result property="tel" column="tel" />
        <result property="height" column="height" />
        <result property="weight" column="weight" />
        <result property="deptno" column="deptno" />
        <result property="profno" column="profno" />
        <result property="dname" column="dname" />
        <result property="pname" column="profName" />
    </resultMap>
    <!-- 단일행 조회를 위한 기능 정의 -->
    <select id="selectItem"
        parameterType="study.spring.springhelper.model.Student"
        resultMap="studentMap">
        SELECT studno, s.name, s.userid, grade, idnum, DATE_FORMAT(birthdate, '%Y-%m-%d')AS birthdate, tel, height, weight, d.deptno, p.profno, dname, p.name AS profName
        FROM student s
        INNER JOIN department d ON d.deptno = s.deptno
        INNER JOIN professor p ON p.profno = s.profno
        WHERE studno=#{studno}
    </select>
    
    <!-- 다중행 조회를 위한 기능 정의 -->
    <select id="selectList"
        parameterType="study.spring.springhelper.model.Student"
        resultMap="studentMap">
        SELECT studno, s.name, s.userid, grade, idnum, DATE_FORMAT(birthdate, '%Y-%m-%d')AS birthdate, tel, height, weight, d.deptno, p.profno, dname, p.name AS profName
        FROM student s
        INNER JOIN department d ON d.deptno = s.deptno
        INNER JOIN professor p ON p.profno = s.profno
        
        <!-- 컬럼이름이 아니라 Beans 멤버변수 -->
        <where>
            <if test="name != null and name != ''">
                s.name LIKE concat('%', #{name}, '%')
            </if>
        </where>
        
        ORDER BY studno DESC
        
        <if test="listCount > 0">
            LIMIT #{offset}, #{listCount}
        </if>
    </select>
    
    <!-- 조건에 맞는 데이터 수를 집계하여 int 타입으로 반환한다.
         count, max, min, sum, avg 함수를 사용한 경우 Mapper에서는
         resultMap이 아닌 resultType으로 반환한다. -->
    <select id="selectCountAll"
            parameterType="study.spring.springhelper.model.Student"
            resultType="int">
        SELECT COUNT(*)
        FROM student s
        INNER JOIN department d ON d.deptno = s.deptno
        INNER JOIN professor p ON p.profno = s.profno
        
        <where>
            <if test="name != null and name != ''">
                s.name LIKE concat('%', #{name}, '%')
            </if>
        </where>
    
    </select>
    
    <!-- 데이터 저장을 위한 기능 정의 -->
    <insert id="insertItem"
        parameterType="study.spring.springhelper.model.Student"
        useGeneratedKeys="true"
        keyProperty="studno">
        INSERT INTO student (
                name, userid, grade, idnum, birthdate, tel, height, weight, deptno, profno
            ) VALUES (
                #{name}, #{userid}, #{grade}, #{idnum}, #{birthdate}, 
                #{tel}, 
                #{height}, 
                #{weight}, 
                #{deptno}, 
                #{profno}
                )
    </insert>

    <!-- 데이터 수정을 위한 기능 정의 -->
    <update id="updateItem"
        parameterType="study.spring.springhelper.model.Student">
        UPDATE student 
        SET 
            name = #{name},
            userid = #{userid},
            grade = #{grade},
            idnum = #{idnum},
            birthdate = #{birthdate},
            tel = #{tel},
            height = #{height},
            weight = #{weight},
            deptno = #{deptno},
            profno = #{profno}
        WHERE studno=#{studno}
    </update>
    
    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem"
        parameterType="study.spring.springhelper.model.Student">
        DELETE FROM student WHERE studno=#{studno}
    </delete>
    

</mapper>

